# lambda_function.py
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AWS Lambda

import json

from config import (
    validate_config,
    X_API_KEY
)
from logger import Logger, load_discord_user_ids
from sheets_service import get_sheet_data
from data_processor import process_sheet_data

def lambda_handler(event, context):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AWS Lambda
    
    Args:
        event (dict): ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å AWS Lambda
        context (object): ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏à‡∏≤‡∏Å AWS Lambda
    
    Returns:
        dict: ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    """
    headers = event.get("headers") or {}
    provided_api_key = headers.get("x-api-key")

    if provided_api_key != X_API_KEY:
        return {"statusCode": 403, "body": json.dumps({"success": False, "message": "Invalid API key"})}
    
    # ‡πÇ‡∏´‡∏•‡∏î Discord user IDs
    discord_user_ids = load_discord_user_ids()
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á logger
    logger = Logger()

    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ configuration
        validate_config()

        # ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheets
        values = get_sheet_data()
        
        # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        noti_success, noti_failed, has_updates = process_sheet_data(values, logger)

        # ‡πÅ‡∏ó‡πá‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if has_updates:
            logger.print(f"‡∏™‡πà‡∏á‡πÇ‡∏ô‡∏ï‡∏¥‡∏Ø Payment Link ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à {noti_success} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£, ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß {noti_failed} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            if noti_failed > 0:
                discord_user_ids.append('400624061925031946')  # ‡πÅ‡∏ó‡πá‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
            logger.send_to_discord(discord_user_ids)
        else:
            logger.print("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡πÇ‡∏ô‡∏ï‡∏¥‡∏Ø")
            logger.send_to_discord()  # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ó‡πá‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï
        
        return {
            'statusCode': 200,
            'body': json.dumps({
                'success': True,
                'message': f'‡∏™‡πà‡∏á‡πÇ‡∏ô‡∏ï‡∏¥‡∏Ø Payment Link ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à {noti_success} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£, ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß {noti_failed} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£',
            })
        }
    
    except Exception as e:
        error_message = str(e)
        logger.print(f"üö®üö®üö®\n‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {error_message}")
        logger.send_to_discord(['400624061925031946'])
        return {
            'statusCode': 500,
            'body': json.dumps({
                'success': False,
                'message': f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {error_message}'
            })
        }

# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á local
if __name__ == "__main__":
    lambda_handler(None, None)
